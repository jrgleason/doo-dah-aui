#!/bin/bash# Shell script to set up AWS Secrets Manager and Systems Manager Parameter Store for doo-dah-aui# Sensitive data goes to Secrets Manager, non-sensitive config goes to Parameter StoreAWS_PROFILE="partyk1d24"REGION="us-east-2"echo "Setting up AWS Secrets Manager and Parameter Store..."echo "AWS Profile: $AWS_PROFILE"echo "Region: $REGION"echo ""# Function to create or update a secret in Secrets Managerset_secret() {    local name="$1"    local value="$2"    local description="$3"        echo "Setting secret: $name"        # Check if secret exists    secret_exists=false    if aws secretsmanager describe-secret \        --secret-id "$name" \        --region "$REGION" \        --profile "$AWS_PROFILE" >/dev/null 2>&1; then        secret_exists=true    fi        if [ "$secret_exists" = true ]; then        # Update existing secret        if aws secretsmanager update-secret \            --secret-id "$name" \            --secret-string "$value" \            --description "$description" \            --region "$REGION" \            --profile "$AWS_PROFILE" >/dev/null 2>&1; then            echo "Successfully set secret $name"        else            echo "Failed to set secret $name"        fi    else        # Create new secret        if aws secretsmanager create-secret \            --name "$name" \            --secret-string "$value" \            --description "$description" \            --region "$REGION" \            --profile "$AWS_PROFILE" >/dev/null 2>&1; then            echo "Successfully set secret $name"        else            echo "Failed to set secret $name"        fi    fi    echo ""}# Function to create or update a parameter in Parameter Storeset_ssm_parameter() {    local name="$1"    local value="$2"    local type="${3:-String}"    local description="$4"        echo "Setting parameter: $name"        if aws ssm put-parameter \        --name "$name" \        --value "$value" \        --type "$type" \        --description "$description" \        --overwrite \        --region "$REGION" \        --profile "$AWS_PROFILE" >/dev/null 2>&1; then        echo "Successfully set parameter $name"    else        echo "Failed to set parameter $name"    fi    echo ""}# Sensitive configuration - Store in AWS Secrets Managerecho "Setting up sensitive configuration in Secrets Manager..."# AUTH0_CLIENT_ID - Store in Secrets ManagerAUTH0_CLIENT_ID="${AUTH0_CLIENT_ID:-}"if [[ -n "$AUTH0_CLIENT_ID" ]]; then    echo "Using existing AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:0:20}..."else    read -p "Enter Auth0 Client ID: " AUTH0_CLIENT_IDfiif [[ -n "$AUTH0_CLIENT_ID" ]]; then    set_secret "doo-dah-aui/auth0-client-id" "$AUTH0_CLIENT_ID" "Auth0 client ID for doo-dah-aui application"fi# SQLITE_PASSWORD - Store in Secrets ManagerSQLITE_PASSWORD="${SQLITE_PASSWORD:-}"if [[ -n "$SQLITE_PASSWORD" ]]; then    echo "Using existing SQLITE_PASSWORD: [HIDDEN]"else    read -s -p "Enter SQLite Password (can be empty for no password): " SQLITE_PASSWORD    echofiif [[ -n "$SQLITE_PASSWORD" ]]; then    set_secret "doo-dah-aui/sqlite-password" "$SQLITE_PASSWORD" "SQLite database password for doo-dah-aui application"else    # Set empty password if none provided    set_secret "doo-dah-aui/sqlite-password" "" "SQLite database password for doo-dah-aui application"fi# PINECONE_API_KEY - Store in Secrets ManagerPINECONE_API_KEY="${PINECONE_API_KEY:-}"if [[ -n "$PINECONE_API_KEY" ]]; then    echo "Using existing PINECONE_API_KEY: ${PINECONE_API_KEY:0:10}..."else    read -p "Enter Pinecone API Key: " PINECONE_API_KEYfiif [[ -n "$PINECONE_API_KEY" ]]; then    set_secret "doo-dah-aui/pinecone-api-key" "$PINECONE_API_KEY" "Pinecone API key for doo-dah-aui application"fiecho ""echo "Setting up non-sensitive configuration in Parameter Store..."# Non-sensitive configuration - Store in Parameter Storeset_ssm_parameter "/doo-dah-aui/ollama-base-url" "http://localhost:11434" "String" "Ollama base URL for doo-dah-aui application"set_ssm_parameter "/doo-dah-aui/ollama-model" "artifish/llama3.2-uncensored:latest" "String" "Ollama model for doo-dah-aui application"set_ssm_parameter "/doo-dah-aui/logging-level" "INFO" "String" "Logging level for doo-dah-aui application"echo ""echo "AWS Secrets Manager and Parameter Store setup complete!"echo ""echo "Summary:"echo "Secrets Manager (sensitive):"echo "  - doo-dah-aui/auth0-client-id"echo "  - doo-dah-aui/sqlite-password"echo "  - doo-dah-aui/pinecone-api-key"echo ""echo "Parameter Store (non-sensitive):"echo "  - /doo-dah-aui/ollama-base-url"echo "  - /doo-dah-aui/ollama-model"echo "  - /doo-dah-aui/logging-level"echo ""echo "Remember to update your ECS task definition to reference these secrets and parameters!"