#!/bin/bash# Shell script to push image to ECRREGION="us-east-2"REPOSITORY_NAME="doo-dah-aui"EXTERNAL_IP="108.82.238.227"LOCAL_REGISTRY_PORT="30500"EXTERNAL_REGISTRY="$EXTERNAL_IP:$LOCAL_REGISTRY_PORT"AWS_PROFILE="partyk1d24"echo "Registry setup for doo-dah-aui..."echo "Using external IP: $EXTERNAL_IP"# Test if external registry is accessibleecho "Testing external registry accessibility: $EXTERNAL_REGISTRY"if curl -f -s "http://$EXTERNAL_REGISTRY/v2/" >/dev/null 2>&1; then    echo "External registry is accessible via HTTP!"    echo ""    echo "Your registry should work with ECS!"    echo "Registry URL: $EXTERNAL_REGISTRY/doo-dah-aui:latest"    echo ""    read -p "Do you want to (1) Use external registry or (2) Use ECR? [1/2]: " choice        if [[ "$choice" == "1" ]]; then        echo "Creating ECS task definition for external registry..."                # Update task definition with external IP        # Get Account ID        ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text --profile "$AWS_PROFILE")                sed "s/{ACCOUNT_ID}/$ACCOUNT_ID/g" ecs-task-definition.json > ecs-task-definition-external.json                echo "Task definition created: ecs-task-definition-external.json"        echo "Image URI: $EXTERNAL_REGISTRY/doo-dah-aui:latest"        echo "You can now run the ECS deployment script with this task definition!"        exit 0    fielse    echo "Cannot reach external registry"    echo "This might be because:"    echo "   1. Port $LOCAL_REGISTRY_PORT is not forwarded through your router/firewall"    echo "   2. Your Kubernetes NodePort service isn't accessible externally"    echo "   3. Your ISP blocks incoming connections on port $LOCAL_REGISTRY_PORT"    echo "Proceeding with ECR setup..."fi# Continue with ECR setup...echo ""echo "Setting up ECR..."# 1. Create ECR repositoryecho "Creating ECR repository..."ECR_URI=$(aws ecr create-repository --repository-name "$REPOSITORY_NAME" --region "$REGION" --query "repository.repositoryUri" --output text --profile "$AWS_PROFILE" 2>/dev/null)if [[ $? -ne 0 ]]; then    echo "Repository might already exist, getting URI..."    ECR_URI=$(aws ecr describe-repositories --repository-names "$REPOSITORY_NAME" --region "$REGION" --query "repositories[0].repositoryUri" --output text --profile "$AWS_PROFILE")fiecho "ECR Repository URI: $ECR_URI"# 2. Get ECR login tokenecho "Logging into ECR..."ECR_LOGIN_SERVER=${ECR_URI%%/*}echo "ECR Login Server: $ECR_LOGIN_SERVER"LOGIN_PASSWORD=$(aws ecr get-login-password --region "$REGION" --profile "$AWS_PROFILE")if [[ $? -ne 0 ]]; then    echo "Failed to get ECR login password. Check your AWS credentials."    exit 1fiecho "$LOGIN_PASSWORD" | docker login --username AWS --password-stdin "$ECR_LOGIN_SERVER"if [[ $? -ne 0 ]]; then    echo "Failed to login to ECR. Check Docker daemon is running."    exit 1fi# 3. Build and push using Gradle Jib (directly to ECR)echo "Building and pushing image using Gradle Jib..."cd appexport AWS_PROFILE="$AWS_PROFILE"../gradlew jibJIB_EXIT_CODE=$?cd ..if [[ $JIB_EXIT_CODE -eq 0 ]]; then    echo "Image successfully built and pushed to ECR using Jib!"    echo "ECR Image URI: $ECR_URI:latest"else    echo "Jib push failed, trying Docker fallback..."        # Fallback: Pull from local registry and push via Docker    echo "Pulling image from local registry..."    docker pull 108.82.238.227:30500/doo-dah-aui:latest        if [[ $? -ne 0 ]]; then        echo "Failed to pull from local registry. Build image first with 'gradlew build'"        exit 1    fi    # Tag image for ECR    echo "Tagging image for ECR..."    docker tag 108.82.238.227:30500/doo-dah-aui:latest "$ECR_URI:latest"    # Push to ECR    echo "Pushing image to ECR..."    docker push "$ECR_URI:latest"        if [[ $? -eq 0 ]]; then        echo "Image successfully pushed to ECR via Docker!"        echo "ECR Image URI: $ECR_URI:latest"    else        echo "Failed to push to ECR via Docker"        exit 1    fifi# 6. Update task definition with ECR URIecho "Updating task definition with ECR URI..."# Get Account IDACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text --profile "$AWS_PROFILE")if [[ $? -ne 0 ]]; then    echo "Failed to get AWS Account ID. Check your AWS credentials."    exit 1fi# Update task definitionsed -e "s|108\.82\.238\.227:30500/doo-dah-aui:latest|$ECR_URI:latest|g" \    -e "s/{ACCOUNT_ID}/$ACCOUNT_ID/g" \    ecs-task-definition.json > ecs-task-definition-ecr.jsonecho "Task definition updated with ECR image URI"echo "Updated file: ecs-task-definition-ecr.json"echo "Account ID: $ACCOUNT_ID"echo "Image URI: $ECR_URI:latest"echo ""echo "You can now deploy to ECS using:"echo "aws ecs register-task-definition --cli-input-json file://ecs-task-definition-ecr.json --profile $AWS_PROFILE"echo "aws ecs update-service --cluster doo-dah --service doo-dah-aui --task-definition doo-dah-aui --profile $AWS_PROFILE"